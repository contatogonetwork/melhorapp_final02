# MelhorApp Final - Guia de Implementação Local

Entendi! Vou focar na implementação local do MelhorApp, mantendo a funcionalidade completa sem necessidade de serviços externos. Também incluirei informações sobre os planos gratuitos dos serviços mencionados, caso decida expandir no futuro.

## 1. Implementação Local do MelhorApp

### Estrutura Local Completa

O sistema funcionará inteiramente no ambiente local, seguindo a estrutura original:

```
melhorapp_final/
├── app/                          # Next.js App Router com páginas e API routes
├── components/                   # Componentes React compartilhados
├── features/                     # Funcionalidades por domínio
├── services/                     # Abstrações de chamadas de API
├── store/                        # Stores Zustand com persistência local
├── public/exports/               # Pasta monitorada para vídeos
├── scripts/video-watcher.js      # Script que monitora novos vídeos
└── [arquivos de configuração]    # next.config.mjs, package.json, etc.
```

### Persistência de Dados

Para manter o funcionamento local sem banco de dados externo:

```typescript name=store/useProjectsStore.ts
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

export const useProjectsStore = create(
  persist(
    (set) => ({
      projects: [],
      videos: [],
      comments: [],
      addProject: (project) => set((state) => ({ 
        projects: [...state.projects, project] 
      })),
      // Outros métodos para manipular o estado
    }),
    {
      name: 'projects-storage', // nome para localStorage
      getStorage: () => localStorage, // usa localStorage como storage
    }
  )
);
```

### Sistema de Watcher de Vídeos (Local)

O watcher de vídeos funcionará localmente com chokidar:

```javascript name=scripts/video-watcher.js
const chokidar = require('chokidar');
const fetch = require('node-fetch');

const EXPORTS_DIR = './public/exports';
const API_URL = 'http://localhost:3000/api';

console.log(`Iniciando watcher de vídeos em ${EXPORTS_DIR}/**/*.mp4...`);

// Iniciar o watcher
const watcher = chokidar.watch(`${EXPORTS_DIR}/**/*.mp4`, {
  persistent: true,
  ignoreInitial: false,
  awaitWriteFinish: true
});

watcher.on('add', async (path) => {
  // Extrai eventId do caminho (assumindo estrutura public/exports/123/video.mp4)
  const match = path.match(/\/exports\/([^\/]+)\/([^\/]+)$/);
  if (!match) return;
  
  const [_, eventId, fileName] = match;
  console.log(`Novo vídeo detectado: ${fileName} para evento ${eventId}`);
  
  try {
    // Notifica API sobre o novo vídeo
    const response = await fetch(`${API_URL}/events/${eventId}/videos`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ fileName })
    });
    
    if (response.ok) {
      console.log(`Vídeo ${fileName} importado com sucesso para evento ${eventId}`);
    } else {
      console.error(`Erro ao importar vídeo: ${response.statusText}`);
    }
  } catch (error) {
    console.error(`Erro na chamada à API: ${error.message}`);
  }
});

console.log('Watcher iniciado! Aguardando novos arquivos...');
```

### Dados Iniciais (Mock)

Para facilitar testes e demonstrações, podemos incluir dados iniciais:

```typescript name=store/initialData.ts
export const initialUsers = [
  {
    id: '1',
    email: 'admin@gonetwork.ai',
    name: 'Administrador',
    password: 'admin', // Em produção, use hash
    role: 'admin'
  },
  {
    id: '2',
    email: 'editor@gonetwork.ai',
    name: 'Editor',
    password: 'editor',
    role: 'editor'
  },
  {
    id: '3',
    email: 'cliente@cliente.com',
    name: 'Cliente',
    password: 'cliente',
    role: 'client'
  }
];

export const initialProjects = [
  {
    id: '123',
    title: 'Evento de Demonstração',
    description: 'Projeto exemplo para demonstração do MelhorApp',
    eventDate: '2025-06-15T14:00:00Z',
    finalDueDate: '2025-06-30T23:59:59Z',
    createdAt: '2025-05-01T10:00:00Z',
    status: 'in_progress',
    numVideos: 3,
    clientId: '3',
    editorId: '2'
  }
];
```

## 2. Comandos para Execução Local

```bash
# Instalação de dependências
npm install

# Criar pastas necessárias
mkdir -p public/exports/123

# Executar em desenvolvimento (em terminais separados)
npm run dev
npm run watch:videos

# OU todos os serviços juntos
npm run dev:all
```

Para acessar o aplicativo:
- URL: http://localhost:3000
- Credenciais: admin@gonetwork.ai / admin

## 3. Informações sobre Planos Gratuitos (para referência futura)

Caso decida migrar para serviços online no futuro, todos os serviços mencionados possuem planos gratuitos:

### Supabase (Banco de Dados)
- **Plano gratuito**: 500MB de armazenamento PostgreSQL
- **Armazenamento**: 50MB para arquivos
- **Limites**: 500K requisições API/mês
- **Vantagens**: PostgreSQL completo, autenticação, armazenamento e edge functions
- **Site**: https://supabase.com/pricing

### MongoDB Atlas (Banco de Dados)
- **Plano gratuito**: Cluster compartilhado com 512MB
- **Limites**: Sem limite de tempo
- **Vantagens**: Fácil de usar, bom para projetos pequenos
- **Site**: https://www.mongodb.com/pricing

### Cloudinary (Armazenamento de Vídeo)
- **Plano gratuito**: 25GB armazenamento + 25GB bandwidth/mês
- **Vantagens**: Otimizado para vídeos, transformações, CDN incluído
- **Perfeito para**: Hospedagem dos vídeos do MelhorApp
- **Site**: https://cloudinary.com/pricing

### AWS S3 (Armazenamento)
- **Tier gratuito**: 5GB por 12 meses
- **Limites**: 20K requisições GET e 2K requisições PUT
- **Site**: https://aws.amazon.com/s3/pricing/

## 4. Como integrar serviços no futuro (quando necessário)

Se decidir migrar para uma versão online, as principais mudanças seriam:

### Modificar os stores para conectar ao banco de dados:

```typescript name=services/database-service.ts
// Exemplo com Supabase
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL || '',
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || ''
);

export async function getEvents() {
  const { data, error } = await supabase
    .from('events')
    .select('*');
  
  if (error) throw error;
  return data;
}

// Demais funções CRUD
```

### Adaptar o upload de vídeos para serviço de armazenamento:

```typescript name=app/api/events/[eventId]/videos/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { v2 as cloudinary } from 'cloudinary';

// Configuração do Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET
});

export async function POST(
  req: NextRequest,
  { params }: { params: { eventId: string } }
) {
  const eventId = params.eventId;
  const formData = await req.formData();
  const file = formData.get('file') as File;
  
  if (!file) {
    return NextResponse.json({ error: 'Arquivo não encontrado' }, { status: 400 });
  }
  
  // Upload para o Cloudinary
  const buffer = Buffer.from(await file.arrayBuffer());
  
  try {
    // Upload para pasta específica do evento
    const result = await new Promise((resolve, reject) => {
      cloudinary.uploader.upload_stream(
        { 
          folder: `events/${eventId}`,
          resource_type: 'video'
        },
        (error, result) => {
          if (error) reject(error);
          else resolve(result);
        }
      ).end(buffer);
    });
    
    // Salvar referência no banco de dados
    // ...código para salvar no banco...
    
    return NextResponse.json({ success: true, url: result.secure_url });
  } catch (error) {
    console.error('Erro no upload:', error);
    return NextResponse.json({ error: 'Falha no upload' }, { status: 500 });
  }
}
```

## 5. Conclusão

Esta implementação:

1. **Mantém todo o sistema funcionando localmente** sem dependência de serviços externos
2. **Preserva o watcher de vídeos** para detecção automática de novos arquivos
3. **Utiliza armazenamento local** (localStorage via Zustand persist) para dados da aplicação
4. **Fornece informações sobre planos gratuitos** caso decida escalar no futuro

Todas as funcionalidades principais estão preservadas: autenticação, gerenciamento de eventos, briefing, vídeos, comentários e aprovações - tudo funcionando localmente sem necessidade de serviços externos por enquanto.